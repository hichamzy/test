{"ast":null,"code":"import { Validators } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"./../services/customer.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nfunction EditCustomerComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 3)(1, \"button\", 4)(2, \"span\", 5);\n    i0.ɵɵtext(3, \"\\u00D7\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"span\", 6);\n    i0.ɵɵlistener(\"click\", function EditCustomerComponent_div_1_Template_span_click_4_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.handleCloseAlert());\n    });\n    i0.ɵɵtext(5, \"Close\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"strong\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(7);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.message, \" \");\n  }\n}\nfunction EditCustomerComponent_form_2_small_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 15);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r4.getErrorMessage(\"Name\", ctx_r4.customerFormGroup.controls[\"name\"].errors), \" \");\n  }\n}\nfunction EditCustomerComponent_form_2_small_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 15);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r5.getErrorMessage(\"Email\", ctx_r5.customerFormGroup.controls[\"email\"].errors), \" \");\n  }\n}\nfunction EditCustomerComponent_form_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"form\", 7);\n    i0.ɵɵlistener(\"ngSubmit\", function EditCustomerComponent_form_2_Template_form_ngSubmit_0_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.handleEditCustomerFormSubmit());\n    });\n    i0.ɵɵelementStart(1, \"div\", 8)(2, \"label\", 9);\n    i0.ɵɵtext(3, \"Customer ID\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"input\", 10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 8)(6, \"label\", 9);\n    i0.ɵɵtext(7, \"Customer name\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(8, \"input\", 11);\n    i0.ɵɵtemplate(9, EditCustomerComponent_form_2_small_9_Template, 2, 1, \"small\", 12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"div\", 8)(11, \"label\", 9);\n    i0.ɵɵtext(12, \"Customer email\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(13, \"input\", 13);\n    i0.ɵɵtemplate(14, EditCustomerComponent_form_2_small_14_Template, 2, 1, \"small\", 12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"div\", 8)(16, \"button\", 14);\n    i0.ɵɵtext(17, \" Edit customer \");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroup\", ctx_r1.customerFormGroup);\n    i0.ɵɵadvance(9);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.customerFormGroup.controls[\"name\"].errors && ctx_r1.customerFormGroup.controls[\"name\"].touched);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.customerFormGroup.controls[\"email\"].errors && ctx_r1.customerFormGroup.controls[\"email\"].touched);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"disabled\", !ctx_r1.customerFormGroup.valid);\n  }\n}\nexport class EditCustomerComponent {\n  constructor(fb, customerService, router) {\n    this.fb = fb;\n    this.customerService = customerService;\n    this.router = router;\n    this.message = \"\";\n  }\n  ngOnInit() {\n    this.customerID = Number(this.router.snapshot.params[\"id\"]);\n    this.customerService.getCustomerById(this.customerID).subscribe({\n      next: customer => {\n        this.customerFormGroup = this.fb.group({\n          id: this.fb.control(customer.id),\n          name: this.fb.control(customer.name, [Validators.required]),\n          email: this.fb.control(customer.email, [Validators.required, Validators.minLength(4)])\n        });\n      },\n      error: err => alert(err.error)\n    });\n  }\n  getErrorMessage(name, error) {\n    if (error[\"required\"]) return `${name}  is required`;\n    if (error[\"minlength\"]) return `The minimum length of ${name} is ${error[\"minlength\"][\"requiredLength\"]}`;\n    if (error[\"min\"]) return `The min value of ${name} is ${error[\"min\"][\"min\"]}`;\n    return \"\";\n  }\n  handleEditCustomerFormSubmit() {\n    const {\n      id,\n      name,\n      email\n    } = this.customerFormGroup.value;\n    this.customerService.editCustomer(id, name, email).subscribe({\n      next: customer => {\n        this.customerFormGroup.reset();\n        this.message = \"Customer edited successfully\";\n      },\n      error: err => console.log(err)\n    });\n  }\n  handleCloseAlert() {\n    this.message = \"\";\n  }\n  static #_ = this.ɵfac = function EditCustomerComponent_Factory(t) {\n    return new (t || EditCustomerComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.CustomerService), i0.ɵɵdirectiveInject(i3.ActivatedRoute));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: EditCustomerComponent,\n    selectors: [[\"app-edit-customer\"]],\n    decls: 3,\n    vars: 2,\n    consts: [[1, \"container\", \"mt-3\", \"col-md-6\", \"offset-md-3\"], [\"class\", \"alert alert-success alert-dismissible fade show\", \"role\", \"alert\", 4, \"ngIf\"], [3, \"formGroup\", \"ngSubmit\", 4, \"ngIf\"], [\"role\", \"alert\", 1, \"alert\", \"alert-success\", \"alert-dismissible\", \"fade\", \"show\"], [\"type\", \"button\", \"data-dismiss\", \"alert\", \"aria-label\", \"Close\", 1, \"close\"], [\"aria-hidden\", \"true\"], [1, \"sr-only\", 3, \"click\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"mb-3\"], [1, \"form-label\"], [\"type\", \"number\", \"formControlName\", \"id\", \"readonly\", \"\", 1, \"form-control\"], [\"type\", \"text\", \"formControlName\", \"name\", 1, \"form-control\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [\"type\", \"email\", \"formControlName\", \"email\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-outline-warning\", 3, \"disabled\"], [1, \"text-danger\"]],\n    template: function EditCustomerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵtemplate(1, EditCustomerComponent_div_1_Template, 8, 1, \"div\", 1);\n        i0.ɵɵtemplate(2, EditCustomerComponent_form_2_Template, 18, 4, \"form\", 2);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.message.length > 0);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.customerFormGroup);\n      }\n    },\n    dependencies: [i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["Validators","i0","EditCustomerComponent","constructor","fb","customerService","router","ngOnInit","customerID","Number","snapshot","params","getCustomerById","subscribe","next","customer","customerFormGroup","group","id","control","name","required","email","minLength","error","err","alert","getErrorMessage","handleEditCustomerFormSubmit","value","editCustomer","reset","message","console","log","handleCloseAlert","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\user\\Desktop\\ecom-control-jee-main\\front\\src\\app\\edit-customer\\edit-customer.component.ts","C:\\Users\\user\\Desktop\\ecom-control-jee-main\\front\\src\\app\\edit-customer\\edit-customer.component.html"],"sourcesContent":["import { Customer } from \"./../model/customer.model\";\nimport { CustomerService } from \"./../services/customer.service\";\nimport {\n  FormGroup,\n  FormBuilder,\n  Validators,\n  ValidationErrors,\n} from \"@angular/forms\";\nimport { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute, Route, Router } from \"@angular/router\";\n\n@Component({\n  selector: \"app-edit-customer\",\n  templateUrl: \"./edit-customer.component.html\",\n  styleUrls: [\"./edit-customer.component.scss\"],\n})\nexport class EditCustomerComponent implements OnInit {\n  customerFormGroup!: FormGroup;\n  message: string = \"\";\n  customerID!: number;\n  constructor(\n    private fb: FormBuilder,\n    private customerService: CustomerService,\n    private router: ActivatedRoute\n  ) {}\n\n  ngOnInit(): void {\n    this.customerID = Number(this.router.snapshot.params[\"id\"]);\n    this.customerService.getCustomerById(this.customerID).subscribe({\n      next: (customer) => {\n        this.customerFormGroup = this.fb.group({\n          id: this.fb.control(customer.id),\n          name: this.fb.control(customer.name, [Validators.required]),\n          email: this.fb.control(customer.email, [\n            Validators.required,\n            Validators.minLength(4),\n          ]),\n        });\n      },\n      error: (err) => alert(err.error),\n    });\n  }\n\n  getErrorMessage(name: string, error: ValidationErrors): string {\n    if (error[\"required\"]) return `${name}  is required`;\n    if (error[\"minlength\"])\n      return `The minimum length of ${name} is ${error[\"minlength\"][\"requiredLength\"]}`;\n    if (error[\"min\"])\n      return `The min value of ${name} is ${error[\"min\"][\"min\"]}`;\n    return \"\";\n  }\n\n  handleEditCustomerFormSubmit() {\n    const { id, name, email } = this.customerFormGroup.value;\n    this.customerService.editCustomer(id, name, email).subscribe({\n      next: (customer) => {\n        this.customerFormGroup.reset();\n        this.message = \"Customer edited successfully\";\n      },\n      error: (err) => console.log(err),\n    });\n  }\n\n  handleCloseAlert() {\n    this.message = \"\";\n  }\n}\n","<div class=\"container mt-3 col-md-6 offset-md-3\">\n  <div\n    *ngIf=\"message.length > 0\"\n    class=\"alert alert-success alert-dismissible fade show\"\n    role=\"alert\"\n  >\n    <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\n      <span aria-hidden=\"true\">&times;</span>\n      <span class=\"sr-only\" (click)=\"handleCloseAlert()\">Close</span>\n    </button>\n    <strong>\n      {{ message }}\n    </strong>\n  </div>\n  <form\n    *ngIf=\"customerFormGroup\"\n    [formGroup]=\"customerFormGroup\"\n    (ngSubmit)=\"handleEditCustomerFormSubmit()\"\n  >\n    <div class=\"mb-3\">\n      <label class=\"form-label\">Customer ID</label>\n      <input type=\"number\" formControlName=\"id\" class=\"form-control\" readonly />\n    </div>\n\n    <div class=\"mb-3\">\n      <label class=\"form-label\">Customer name</label>\n      <input type=\"text\" formControlName=\"name\" class=\"form-control\" />\n      <small\n        class=\"text-danger\"\n        *ngIf=\"\n          customerFormGroup.controls['name'].errors &&\n          customerFormGroup.controls['name'].touched\n        \"\n      >\n        {{ getErrorMessage(\"Name\", customerFormGroup.controls[\"name\"].errors) }}\n      </small>\n    </div>\n\n    <div class=\"mb-3\">\n      <label class=\"form-label\">Customer email</label>\n      <input type=\"email\" formControlName=\"email\" class=\"form-control\" />\n      <small\n        class=\"text-danger\"\n        *ngIf=\"\n          customerFormGroup.controls['email'].errors &&\n          customerFormGroup.controls['email'].touched\n        \"\n      >\n        {{\n          getErrorMessage(\"Email\", customerFormGroup.controls[\"email\"].errors)\n        }}\n      </small>\n    </div>\n\n    <div class=\"mb-3\">\n      <button\n        type=\"submit\"\n        class=\"btn btn-outline-warning\"\n        [disabled]=\"!customerFormGroup.valid\"\n      >\n        Edit customer\n      </button>\n    </div>\n  </form>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}